stages:
  - build
  - release

variables:
  DOCKER_HOST: "tcp://docker:2376"
  DOCKER_TLS_VERIFY: "1"
  DOCKER_CERT_PATH: "/certs/client"
  DOCKER_IMAGE: "prplanit/apt-cacher-ng-oci"
  DOCKER_TAG: "$CI_COMMIT_TAG"
  GIT_TAG: "$CI_COMMIT_TAG"
  GITLAB_DOMAIN: "https://gitlab.prplanit.com"
  DOCKER_TLS_CERTDIR: "/certs"

build-image:
  stage: build
  image: docker:24.0.5
  services:
    - name: docker:24.0.5-dind
      alias: docker
  before_script:  |
    echo "---------------------------------------------------------------------------"
    echo "AntParade GitOps 🐜 - Preparing $CI_JOB_IMAGE image for build tasks"
    echo "---------------------------------------------------------------------------"
    echo "Installing dependencies (bash git)..."
    apk add --no-cache bash git                                                                                                                             >/dev/null
    # - ls -l "$DOCKER_CERT_PATH"  # Debug: Show certs
  script:  |
    echo "Building Docker image $DOCKER_IMAGE:$DOCKER_TAG..."
    docker build -t "$DOCKER_IMAGE:$DOCKER_TAG" .                                                                                                           >/dev/null
    echo "Logging into the Docker Hub (docker.io)..."
    echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin                                                                   >/dev/null
    echo "Uploading $DOCKER_IMAGE:$DOCKER_TAG to the Docker Hub (docker.io)..."
    docker push "$DOCKER_IMAGE:$DOCKER_TAG"                                                                                                                 >/dev/null
    if docker manifest inspect "$DOCKER_IMAGE:$DOCKER_TAG" > /dev/null 2>&1; then
        echo "✅ Image $DOCKER_IMAGE:$DOCKER_TAG successfully pushed and verified."
      else
        echo "❌ Image push failed or is not available yet on the registry."
        exit 1
      fi
  rules:
    - if: $CI_COMMIT_TAG

create-release:
  before_script:  |
    echo "---------------------------------------------------------------------------"
    echo "AntParade GitOps 🐜 - Preparing $CI_JOB_IMAGE image for release creation tasks"
    echo "---------------------------------------------------------------------------"
    echo "Installing dependencies (bash curl jq)..."
    apk add --no-cache bash curl jq                                                                                                                         >/dev/null
  image: alpine:3.22.1
  needs:
    - job: generate_release_notes
      artifacts: true
  only:
    - tags
  script:  |
    echo "Reading $DOCKER_HUB_USERNAME/$CI_PROJECT_NAME's changelog into memory..."
    RELEASE_NOTES=$(cat release.md)

    echo "Creating Gitlab release- $DOCKER_HUB_USERNAME/$CI_PROJECT_NAME:$CI_COMMIT_TAG..."
    curl --silent --show-error --fail --header "PRIVATE-TOKEN: $GITLAB_TOKEN" --request POST \
      --form "name=Release $CI_COMMIT_TAG" \
      --form "tag_name=$CI_COMMIT_TAG" \
      --form "description=$RELEASE_NOTES" \
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases" || echo "Release might already exist"                                                               >/dev/null
    echo "🧪 Validating GitLab release creation..."

    RELEASE_RESPONSE=$(curl --silent --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases/$CI_COMMIT_TAG")                                                                                     >/dev/null

    # Try to parse the tag name from the response to verify existence
    RELEASE_TAG=$(echo "$RELEASE_RESPONSE" | jq -r '.tag_name // empty')                                                                                    >/dev/null

    if [ "$RELEASE_TAG" = "$CI_COMMIT_TAG" ]; then
        echo ""
        echo "🎉 ✅ GitLab release created successfully!"
        echo "    🔖 Tag: $RELEASE_TAG"
        echo "    🔗 ${CI_PROJECT_URL}/-/releases/$RELEASE_TAG"
      else
        echo ""
        echo "❌ GitLab release validation failed!"
        echo "🧾 Response from API:"
        echo "$RELEASE_RESPONSE"
        exit 1
      fi

    DOCKER_IMAGE_LINK="https://hub.docker.com/r/$DOCKER_HUB_USERNAME/$CI_PROJECT_NAME/tags?page=1&name=$CI_COMMIT_TAG"

    echo "Adding a link to $DOCKER_HUB_USERNAME/$CI_PROJECT_NAME:$CI_COMMIT_TAG via the Docker Hub on the generated Gitlab release page..."
    curl --silent --show-error --fail --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
      --request POST \
      --header "Content-Type: application/json" \
      --data "{\"name\":\"Docker Image $CI_COMMIT_TAG\",\"url\":\"$DOCKER_IMAGE_LINK\",\"link_type\":\"other\"}" \
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases/$CI_COMMIT_TAG/assets/links"                                                                         >/dev/null
      
    echo "🧪 Validating GitLab release asset link..."

    ASSET_LINKS=$(curl --silent --show-error --fail --silent --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases/$CI_COMMIT_TAG/assets/links")                                                                        >/dev/null

    EXPECTED_LINK_NAME="Docker Image $CI_COMMIT_TAG"

    LINK_FOUND=$(echo "$ASSET_LINKS" | jq -e --arg NAME "$EXPECTED_LINK_NAME" '.[] | select(.name == $NAME)' > /dev/null && echo "yes" || echo "no")        >/dev/null

    if [ "$LINK_FOUND" = "yes" ]; then
      echo ""
      echo "🔗 ✅ Asset link '$EXPECTED_LINK_NAME' created successfully!"
    else
      echo ""
      echo "❌ Asset link '$EXPECTED_LINK_NAME' not found!"
      echo "🔍 Full asset links response:"
      echo "$ASSET_LINKS"
      exit 1
    fi
  stage: release

generate_release_notes:
  artifacts:
    paths:
      - release.md
    expire_in: 1 hour
  before_script: |
    chmod +x ./scripts/release-notes.sh
  image: alpine:3.22.1
  only:
    - tags
  script: |
    echo "Generating release notes for $DOCKER_HUB_USERNAME/$CI_PROJECT_NAME:$CI_COMMIT_TAG..."
    apk add --no-cache bash curl git                                                                                                                      >/dev/null
    ./scripts/release-notes.sh > release.md
    
    echo "🧪 Validating release notes file..."

    if [ ! -s release.md ]; then
      echo "❌ release.md was not created or is empty!"
      exit 1
    else
      echo "✅ release.md created successfully with contents:"
      head -n 10 release.md  # Show first 10 lines
    fi
  stage: release

update-release-badge:
  stage: release
  image: alpine:3.22.1
  script: |
    set -e

    echo "Installing dependencies..."
    apk add --no-cache curl jq git bash

    LATEST_TAG=$(curl --silent --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/tags" | jq -r '.[0].name')
    PIPELINE_STATUS=$(curl --silent --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/pipelines?ref=$LATEST_TAG" | jq -r '.[0].status')

    echo "Determined latest tag: $LATEST_TAG"
    echo "Pipeline status for $LATEST_TAG: $PIPELINE_STATUS"

    case "$PIPELINE_STATUS" in
      success)
        COLOR="#4c1"
        STATUS="passed"
        ;;
      failed)
        COLOR="#e05d44"
        STATUS="failed"
        ;;
      *)
        COLOR="#dfb317"
        STATUS="$PIPELINE_STATUS"
        ;;
    esac

    echo "Updating badge SVG..."
    mkdir -p assets
    sed -e "s|{{COLOR}}|$COLOR|g" -e "s|{{STATUS}}|$STATUS|g" assets/badge-release-generic.svg > assets/badge-release-status.svg

    if grep -q "{{" assets/badge-release-status.svg; then
      echo "❌ Error: placeholders not replaced in SVG!"
      exit 1
    fi

    echo "Final badge output:"
    head -n 20 assets/badge-release-status.svg

  artifacts:
    paths:
      - assets/badge-release-status.svg
    expire_in: 1 hour
  only:
    - main